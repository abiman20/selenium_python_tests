# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

# from test.common import Common

class TestSwagLabs():
    def setup_method(self, method):
        self.browser = webdriver.Chrome()
        self.vars = {}
    
    def teardown_method(self, method):
        self.browser.quit()
  
# ----------------------------- Test functions -----------------------------------------------------

    def test_recorded(self):
        self.browser.get("https://www.saucedemo.com/")
        self.browser.set_window_size(1440, 875)
        self.browser.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").click()
        self.browser.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("standard_user")
        self.browser.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").send_keys("secret_sauce")
        self.browser.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
        self.browser.find_element(By.CSS_SELECTOR, ".app_logo").click()

    def test_login_correct_user(self):
        # precondition
        self.login(self.browser, 'standard_user', 'secret_sauce')

        # Action
        url = self.browser.current_url
        title = self.browser.find_element(By.CLASS_NAME, 'title')
        title_txt = title.text

        # postcondition
        assert url == 'https://www.saucedemo.com/inventory.html'
        assert title_txt == 'Products'


    def test_login_incorrect_user(self):
        # precondition
        self.login(self.browser, 'locked_out_user', 'secret_sauce')

        # Action
        error_message = self.browser.find_element(By.CLASS_NAME, 'error-message-container.error').text

        # postcondition
        assert error_message == 'Epic sadface: Sorry, this user has been locked out.'


# ----------------------------- Business functions -----------------------------------------------------

    def login(self, page,username,password):
        page.get("https://www.saucedemo.com")
        username_txt = page.find_element(By.ID,'user-name')
        password_txt = page.find_element(By.NAME,'password')
        login_btn =page.find_element(By.CLASS_NAME,'submit-button.btn_action')
        username_txt.send_keys(username)
        password_txt.send_keys(password)
        login_btn.click()